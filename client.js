// Generated by CoffeeScript 1.3.3
(function() {
  var HTTPController, Room,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Room = require('./room').Room;

  HTTPController = require('./httpcontroller').HTTPController;

  exports.Client = (function() {

    function Client(socket) {
      this.socket = socket;
      this.disconnect = __bind(this.disconnect, this);

      this.sendData = __bind(this.sendData, this);

      this.joinRoom = __bind(this.joinRoom, this);

      this.socket.on('join', this.joinRoom);
      this.socket.on('send', this.sendData);
      this.socket.on('disconnect', this.disconnect);
    }

    Client.prototype.joinRoom = function(data) {
      var _ref;
      if (!((data != null) && (data.userId != null) && (data.roomId != null) && (data.host != null))) {
        return;
      }
      if ((_ref = this.room) != null) {
        _ref.removeClient(this);
      }
      this.userId = data.userId;
      this.room = Room.get(data.roomId);
      this.room.addClient(this);
      return this.controller = new HTTPController();
    };

    Client.prototype.sendData = function(obj) {
      var eventString, responseObject,
        _this = this;
      if (this.room == null) {
        return this.error("Not in room");
      }
      if (obj == null) {
        return this.error("Missing data");
      }
      responseObject = {};
      eventString = obj.event != null ? obj.event : "update";
      if (obj.broadcast != null) {
        responseObject.broadcast = obj.broadcast;
      }
      if (obj.backendRequest != null) {
        return this.controller.request({
          data: obj.backendRequest.data,
          path: obj.backendRequest.path,
          method: obj.backendRequest.method,
          headers: obj.backendRequest.headers,
          error: function(error) {
            return console.error(error);
          },
          success: function(response) {
            responseObject.backendResponse = response;
            return _this.room.broadcast(eventString, responseObject);
          }
        });
      } else {
        return this.room.broadcast(eventString, responseObject);
      }
    };

    Client.prototype.disconnect = function() {
      var _ref;
      return (_ref = this.room) != null ? _ref.removeClient(this) : void 0;
    };

    Client.prototype.emit = function(message, data) {
      return this.socket.emit(message, data);
    };

    Client.prototype.error = function(errorMessage) {
      return this.socket.emit('error', errorMessage);
    };

    return Client;

  })();

}).call(this);
