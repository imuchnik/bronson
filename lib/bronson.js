// Generated by CoffeeScript 1.3.3
(function() {
  var Bronson, Connection, EventEmitter, FS, HTTP, HttpController, IO, Room,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  IO = require('socket.io');

  HTTP = require('http');

  FS = require('fs');

  Connection = require('./connection');

  Room = require('./room');

  HttpController = require('./httpcontroller');

  EventEmitter = require('events').EventEmitter;

  Bronson = (function(_super) {

    __extends(Bronson, _super);

    function Bronson(host, port, options) {
      var _base, _ref;
      this.options = options != null ? options : {};
      this.handleHttp = __bind(this.handleHttp, this);

      if ((_ref = (_base = this.options).sendToSelf) == null) {
        _base.sendToSelf = true;
      }
      if (host) {
        this.httpController = new HttpController(host, port);
      }
    }

    Bronson.prototype.handleHttp = function(req, res) {
      if (req.url === '/bronson/bronson.js') {
        return FS.readFile('client/bronson.min.js', function(err, fsData) {
          return res.end(fsData.toString());
        });
      }
    };

    Bronson.prototype.listen = function(port, options) {
      var httpServer,
        _this = this;
      if (options == null) {
        options = {};
      }
      if (typeof port === 'number') {
        httpServer = HTTP.createServer(this.handleHttp);
        httpServer.listen(port);
      } else {
        httpServer = port;
        httpServer.on('request', this.handleHttp);
      }
      this.io = IO.listen(httpServer, options);
      return this.io.sockets.on('connection', function(socket) {
        return new Connection(socket, _this, _this.httpController);
      });
    };

    return Bronson;

  })(EventEmitter);

  module.exports = Bronson;

}).call(this);
