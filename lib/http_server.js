// Generated by CoffeeScript 1.3.3
(function() {
  var FS, HTTP, HttpServer, Room, URL,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  URL = require('url');

  FS = require('fs');

  HTTP = require('http');

  Room = require('./room');

  HttpServer = (function() {

    function HttpServer(port) {
      this.handleRequest = __bind(this.handleRequest, this);
      if (typeof port === 'number') {
        this.server = HTTP.createServer(this.handleRequest);
        this.server.listen(port);
      } else {
        this.server = port;
        this.server.on('request', this.handleRequest);
      }
    }

    HttpServer.prototype.handleRequest = function(req, res) {
      var request, roomId;
      request = new HttpServer.HttpRequest(req, res);
      if (!request.isBronsonNamespace()) {
        return;
      }
      if (request.path[1] === 'bronson.js') {
        return this.routeHandlers.clientLibrary(request);
      } else if (request.path[1] === 'room') {
        roomId = request.path[2];
        return this.routeHandlers.room(request, roomId);
      } else {
        return request.end('Welcome to Bronson.', 'text/plain');
      }
    };

    HttpServer.prototype.routeHandlers = {
      clientLibrary: function(request) {
        return FS.readFile("" + __dirname + "/../client/bronson.min.js", function(err, fsData) {
          return request.end(fsData.toString(), 'text/javascript');
        });
      },
      room: function(request, roomId) {
        var obj;
        if (Room.rooms[roomId] != null) {
          obj = {
            connections: Room.rooms[roomId].getUserIds()
          };
        } else {
          obj = {};
        }
        return request.end(JSON.stringify(obj));
      }
    };

    return HttpServer;

  })();

  HttpServer.HttpRequest = (function() {

    function HttpRequest(req, res) {
      var i, path, _i, _ref;
      this.req = req;
      this.res = res;
      this.req = URL.parse(this.req.url, true);
      this.path = [];
      path = this.req.pathname.split(/\//g);
      for (i = _i = 1, _ref = path.length - 1; _i <= _ref; i = _i += 1) {
        this.path.push(path[i]);
      }
    }

    HttpRequest.prototype.end = function(data, contentType) {
      if (contentType == null) {
        contentType = 'application/json';
      }
      if ((this.req.query.callback != null) && contentType === 'application/json') {
        data = "" + this.req.query.callback + "(" + data + ")";
        contentType = 'text/javascript';
      }
      this.res.writeHead(200, {
        'Content-Type': contentType,
        'Content-Length': Buffer.byteLength(data, 'utf8')
      });
      this.res.write(data);
      return this.res.end();
    };

    HttpRequest.prototype.isBronsonNamespace = function() {
      return this.path[0] === 'bronson';
    };

    return HttpRequest;

  })();

  module.exports = HttpServer;

}).call(this);
